"use strict";
exports.__esModule = true;
var request = require("request");
var promise = require("bluebird");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
/**
*
*/
var JsonAttack = /** @class */ (function () {
    function JsonAttack() {
    }
    return JsonAttack;
}());
exports.JsonAttack = JsonAttack;
/**
*
*/
var JsonDetectionpoint = /** @class */ (function () {
    function JsonDetectionpoint() {
    }
    return JsonDetectionpoint;
}());
exports.JsonDetectionpoint = JsonDetectionpoint;
/**
*
*/
var JsonDetectionsystem = /** @class */ (function () {
    function JsonDetectionsystem() {
    }
    return JsonDetectionsystem;
}());
exports.JsonDetectionsystem = JsonDetectionsystem;
/**
*
*/
var JsonEvent = /** @class */ (function () {
    function JsonEvent() {
    }
    return JsonEvent;
}());
exports.JsonEvent = JsonEvent;
/**
*
*/
var JsonGeolocation = /** @class */ (function () {
    function JsonGeolocation() {
    }
    return JsonGeolocation;
}());
exports.JsonGeolocation = JsonGeolocation;
/**
*
*/
var JsonIpaddress = /** @class */ (function () {
    function JsonIpaddress() {
    }
    return JsonIpaddress;
}());
exports.JsonIpaddress = JsonIpaddress;
/**
*
*/
var JsonInterval = /** @class */ (function () {
    function JsonInterval() {
    }
    return JsonInterval;
}());
exports.JsonInterval = JsonInterval;
/**
*
*/
var JsonKeyvaluepair = /** @class */ (function () {
    function JsonKeyvaluepair() {
    }
    return JsonKeyvaluepair;
}());
exports.JsonKeyvaluepair = JsonKeyvaluepair;
/**
*
*/
var JsonResource = /** @class */ (function () {
    function JsonResource() {
    }
    return JsonResource;
}());
exports.JsonResource = JsonResource;
/**
*
*/
var JsonResponse = /** @class */ (function () {
    function JsonResponse() {
    }
    return JsonResponse;
}());
exports.JsonResponse = JsonResponse;
/**
*
*/
var JsonThreshold = /** @class */ (function () {
    function JsonThreshold() {
    }
    return JsonThreshold;
}());
exports.JsonThreshold = JsonThreshold;
/**
*
*/
var JsonUser = /** @class */ (function () {
    function JsonUser() {
    }
    return JsonUser;
}());
exports.JsonUser = JsonUser;
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
var OAuth = /** @class */ (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    };
    return OAuth;
}());
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
}());
var RestReportingEngineApi = /** @class */ (function () {
    function RestReportingEngineApi(basePathOrUsername, password, basePath) {
        this.basePath = 'http://localhost:8085';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    RestReportingEngineApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindAttacksGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/attacks';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/attacks/count';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param label
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksByLabelGET = function (earliest, label) {
        var path = this.basePath + '/api/v1.0/reports/attacks/count-by-label';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (label !== undefined) {
            queryParameters['label'] = label;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param username
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksByUserGET = function (earliest, username) {
        var path = this.basePath + '/api/v1.0/reports/attacks/count-by-user';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (username !== undefined) {
            queryParameters['username'] = username;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindEventsGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/events';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/events/count';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param label
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsByLabelGET = function (earliest, label) {
        var path = this.basePath + '/api/v1.0/reports/events/count-by-label';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (label !== undefined) {
            queryParameters['label'] = label;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param username
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsByUserGET = function (earliest, username) {
        var path = this.basePath + '/api/v1.0/reports/events/count-by-user';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (username !== undefined) {
            queryParameters['username'] = username;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindResponsesGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/responses';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/reports/responses/count';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param label
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesByLabelGET = function (earliest, label) {
        var path = this.basePath + '/api/v1.0/reports/responses/count-by-label';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (label !== undefined) {
            queryParameters['label'] = label;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     * @param username
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesByUserGET = function (earliest, username) {
        var path = this.basePath + '/api/v1.0/reports/responses/count-by-user';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        if (username !== undefined) {
            queryParameters['username'] = username;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineGetServerConfigurationAsJsonGET = function () {
        var path = this.basePath + '/api/v1.0/reports/server-config';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineGetBase64EncodedServerConfigurationFileContentGET = function () {
        var path = this.basePath + '/api/v1.0/reports/server-config-base64';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return RestReportingEngineApi;
}());
exports.RestReportingEngineApi = RestReportingEngineApi;
var RestRequestHandlerApi = /** @class */ (function () {
    function RestRequestHandlerApi(basePathOrUsername, password, basePath) {
        this.basePath = 'http://localhost:8085';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    RestRequestHandlerApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     *
     * @param body
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerAddAttackPOST = function (body) {
        var path = this.basePath + '/api/v1.0/attacks';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: body
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param body
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerAddEventPOST = function (body) {
        var path = this.basePath + '/api/v1.0/events';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: body
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    /**
     *
     *
     * @param earliest
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerGetResponsesGET = function (earliest) {
        var path = this.basePath + '/api/v1.0/responses';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications["default"].applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return RestRequestHandlerApi;
}());
exports.RestRequestHandlerApi = RestRequestHandlerApi;
