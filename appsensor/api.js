"use strict";
/**
 * appsensor-ws-rest-server
 * <h1>appsensor-ws-rest-server</h1><p>The AppSensor project is an OWASP project to create a knowledge base as well as          practical implementations for intrusion detection within applications.</p>
 *
 * OpenAPI spec version: 2.3.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
exports.__esModule = true;
var localVarRequest = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'http://localhost:8085';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = /** @class */ (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
/**
 *
 */
var JsonAttack = /** @class */ (function () {
    function JsonAttack() {
    }
    JsonAttack.getAttributeTypeMap = function () {
        return JsonAttack.attributeTypeMap;
    };
    JsonAttack.discriminator = undefined;
    JsonAttack.attributeTypeMap = [
        {
            "name": "detectionPoint",
            "baseName": "detectionPoint",
            "type": "JsonDetectionpoint"
        },
        {
            "name": "detectionSystem",
            "baseName": "detectionSystem",
            "type": "JsonDetectionsystem"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "Array<JsonKeyvaluepair>"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "JsonResource"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "JsonUser"
        }
    ];
    return JsonAttack;
}());
exports.JsonAttack = JsonAttack;
/**
 *
 */
var JsonDetectionpoint = /** @class */ (function () {
    function JsonDetectionpoint() {
    }
    JsonDetectionpoint.getAttributeTypeMap = function () {
        return JsonDetectionpoint.attributeTypeMap;
    };
    JsonDetectionpoint.discriminator = undefined;
    JsonDetectionpoint.attributeTypeMap = [
        {
            "name": "category",
            "baseName": "category",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "responses",
            "baseName": "responses",
            "type": "Array<JsonResponse>"
        },
        {
            "name": "threshold",
            "baseName": "threshold",
            "type": "JsonThreshold"
        }
    ];
    return JsonDetectionpoint;
}());
exports.JsonDetectionpoint = JsonDetectionpoint;
/**
 *
 */
var JsonDetectionsystem = /** @class */ (function () {
    function JsonDetectionsystem() {
    }
    JsonDetectionsystem.getAttributeTypeMap = function () {
        return JsonDetectionsystem.attributeTypeMap;
    };
    JsonDetectionsystem.discriminator = undefined;
    JsonDetectionsystem.attributeTypeMap = [
        {
            "name": "detectionSystemId",
            "baseName": "detectionSystemId",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "JsonIpaddress"
        }
    ];
    return JsonDetectionsystem;
}());
exports.JsonDetectionsystem = JsonDetectionsystem;
/**
 *
 */
var JsonEvent = /** @class */ (function () {
    function JsonEvent() {
    }
    JsonEvent.getAttributeTypeMap = function () {
        return JsonEvent.attributeTypeMap;
    };
    JsonEvent.discriminator = undefined;
    JsonEvent.attributeTypeMap = [
        {
            "name": "detectionPoint",
            "baseName": "detectionPoint",
            "type": "JsonDetectionpoint"
        },
        {
            "name": "detectionSystem",
            "baseName": "detectionSystem",
            "type": "JsonDetectionsystem"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "Array<JsonKeyvaluepair>"
        },
        {
            "name": "resource",
            "baseName": "resource",
            "type": "JsonResource"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "JsonUser"
        }
    ];
    return JsonEvent;
}());
exports.JsonEvent = JsonEvent;
/**
 *
 */
var JsonGeolocation = /** @class */ (function () {
    function JsonGeolocation() {
    }
    JsonGeolocation.getAttributeTypeMap = function () {
        return JsonGeolocation.attributeTypeMap;
    };
    JsonGeolocation.discriminator = undefined;
    JsonGeolocation.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "number"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "number"
        }
    ];
    return JsonGeolocation;
}());
exports.JsonGeolocation = JsonGeolocation;
/**
 *
 */
var JsonInterval = /** @class */ (function () {
    function JsonInterval() {
    }
    JsonInterval.getAttributeTypeMap = function () {
        return JsonInterval.attributeTypeMap;
    };
    JsonInterval.discriminator = undefined;
    JsonInterval.attributeTypeMap = [
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "unit",
            "baseName": "unit",
            "type": "string"
        }
    ];
    return JsonInterval;
}());
exports.JsonInterval = JsonInterval;
/**
 *
 */
var JsonIpaddress = /** @class */ (function () {
    function JsonIpaddress() {
    }
    JsonIpaddress.getAttributeTypeMap = function () {
        return JsonIpaddress.attributeTypeMap;
    };
    JsonIpaddress.discriminator = undefined;
    JsonIpaddress.attributeTypeMap = [
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "geoLocation",
            "baseName": "geoLocation",
            "type": "JsonGeolocation"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        }
    ];
    return JsonIpaddress;
}());
exports.JsonIpaddress = JsonIpaddress;
/**
 *
 */
var JsonKeyvaluepair = /** @class */ (function () {
    function JsonKeyvaluepair() {
    }
    JsonKeyvaluepair.getAttributeTypeMap = function () {
        return JsonKeyvaluepair.attributeTypeMap;
    };
    JsonKeyvaluepair.discriminator = undefined;
    JsonKeyvaluepair.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return JsonKeyvaluepair;
}());
exports.JsonKeyvaluepair = JsonKeyvaluepair;
/**
 *
 */
var JsonResource = /** @class */ (function () {
    function JsonResource() {
    }
    JsonResource.getAttributeTypeMap = function () {
        return JsonResource.attributeTypeMap;
    };
    JsonResource.discriminator = undefined;
    JsonResource.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        }
    ];
    return JsonResource;
}());
exports.JsonResource = JsonResource;
/**
 *
 */
var JsonResponse = /** @class */ (function () {
    function JsonResponse() {
    }
    JsonResponse.getAttributeTypeMap = function () {
        return JsonResponse.attributeTypeMap;
    };
    JsonResponse.discriminator = undefined;
    JsonResponse.attributeTypeMap = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "detectionSystem",
            "baseName": "detectionSystem",
            "type": "JsonDetectionsystem"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "JsonInterval"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "Array<JsonKeyvaluepair>"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "JsonUser"
        }
    ];
    return JsonResponse;
}());
exports.JsonResponse = JsonResponse;
/**
 *
 */
var JsonThreshold = /** @class */ (function () {
    function JsonThreshold() {
    }
    JsonThreshold.getAttributeTypeMap = function () {
        return JsonThreshold.attributeTypeMap;
    };
    JsonThreshold.discriminator = undefined;
    JsonThreshold.attributeTypeMap = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "JsonInterval"
        }
    ];
    return JsonThreshold;
}());
exports.JsonThreshold = JsonThreshold;
/**
 *
 */
var JsonUser = /** @class */ (function () {
    function JsonUser() {
    }
    JsonUser.getAttributeTypeMap = function () {
        return JsonUser.attributeTypeMap;
    };
    JsonUser.discriminator = undefined;
    JsonUser.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "JsonIpaddress"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }
    ];
    return JsonUser;
}());
exports.JsonUser = JsonUser;
var enumsMap = {};
var typeMap = {
    "JsonAttack": JsonAttack,
    "JsonDetectionpoint": JsonDetectionpoint,
    "JsonDetectionsystem": JsonDetectionsystem,
    "JsonEvent": JsonEvent,
    "JsonGeolocation": JsonGeolocation,
    "JsonInterval": JsonInterval,
    "JsonIpaddress": JsonIpaddress,
    "JsonKeyvaluepair": JsonKeyvaluepair,
    "JsonResource": JsonResource,
    "JsonResponse": JsonResponse,
    "JsonThreshold": JsonThreshold,
    "JsonUser": JsonUser
};
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
        this.username = '';
        this.password = '';
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = 'myclientapp';
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
        this.accessToken = '';
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
        this.username = '';
        this.password = '';
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var RestReportingEngineApiApiKeys;
(function (RestReportingEngineApiApiKeys) {
})(RestReportingEngineApiApiKeys = exports.RestReportingEngineApiApiKeys || (exports.RestReportingEngineApiApiKeys = {}));
var RestReportingEngineApi = /** @class */ (function () {
    function RestReportingEngineApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new ApiKeyAuth('header', 'X-Appsensor-Client-Application-Name2')
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RestReportingEngineApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RestReportingEngineApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RestReportingEngineApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications["default"] = auth;
    };
    RestReportingEngineApi.prototype.setApiKey = function (key, value) {
        this.authentications[RestReportingEngineApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @param earliest
     * @param label
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksByLabelGET = function (earliest, label, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/attacks/count-by-label';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (label !== undefined) {
            localVarQueryParameters['label'] = ObjectSerializer.serialize(label, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param username
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksByUserGET = function (earliest, username, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/attacks/count-by-user';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountAttacksGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/attacks/count';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param label
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsByLabelGET = function (earliest, label, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/events/count-by-label';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (label !== undefined) {
            localVarQueryParameters['label'] = ObjectSerializer.serialize(label, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param username
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsByUserGET = function (earliest, username, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/events/count-by-user';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountEventsGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/events/count';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param label
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesByLabelGET = function (earliest, label, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/responses/count-by-label';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (label !== undefined) {
            localVarQueryParameters['label'] = ObjectSerializer.serialize(label, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param username
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesByUserGET = function (earliest, username, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/responses/count-by-user';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineCountResponsesGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/responses/count';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "number");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindAttacksGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/attacks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<JsonAttack>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindEventsGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/events';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<JsonEvent>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineFindResponsesGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/responses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<JsonResponse>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineGetBase64EncodedServerConfigurationFileContentGET = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/server-config-base64';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "JsonKeyvaluepair");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param {*} [options] Override http request options.
     */
    RestReportingEngineApi.prototype.resourceRestReportingEngineGetServerConfigurationAsJsonGET = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/reports/server-config';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RestReportingEngineApi;
}());
exports.RestReportingEngineApi = RestReportingEngineApi;
var RestRequestHandlerApiApiKeys;
(function (RestRequestHandlerApiApiKeys) {
})(RestRequestHandlerApiApiKeys = exports.RestRequestHandlerApiApiKeys || (exports.RestRequestHandlerApiApiKeys = {}));
var RestRequestHandlerApi = /** @class */ (function () {
    function RestRequestHandlerApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RestRequestHandlerApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RestRequestHandlerApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RestRequestHandlerApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications["default"] = auth;
    };
    RestRequestHandlerApi.prototype.setApiKey = function (key, value) {
        this.authentications[RestRequestHandlerApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @param body
     * @param {*} [options] Override http request options.
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerAddAttackPOST = function (body, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/attacks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "JsonAttack")
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param body
     * @param {*} [options] Override http request options.
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerAddEventPOST = function (body, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/events';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "JsonEvent")
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @param earliest
     * @param {*} [options] Override http request options.
     */
    RestRequestHandlerApi.prototype.resourceRestRequestHandlerGetResponsesGET = function (earliest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/api/v1.0/responses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (earliest !== undefined) {
            localVarQueryParameters['earliest'] = ObjectSerializer.serialize(earliest, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications["default"].applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<JsonResponse>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RestRequestHandlerApi;
}());
exports.RestRequestHandlerApi = RestRequestHandlerApi;
