import request = require('request');
import promise = require('bluebird');
import http = require('http');

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

/**
 *
 */
export class JsonAttack {
    /**
     *
     */
    detectionPoint: JsonDetectionpoint;
    /**
     *
     */
    detectionSystem: JsonDetectionsystem;
    /**
     *
     */
    id: string;
    /**
     *
     */
    metadata: Array<JsonKeyvaluepair>;
    /**
     *
     */
    resource: JsonResource;
    /**
     *
     */
    timestamp: string;
    /**
     *
     */
    user: JsonUser;
}

/**
 *
 */
export class JsonDetectionpoint {
    /**
     *
     */
    category: string;
    /**
     *
     */
    id: string;
    /**
     *
     */
    label: string;
    /**
     *
     */
    responses: Array<JsonResponse>;
    /**
     *
     */
    threshold: JsonThreshold;
}

/**
 *
 */
export class JsonDetectionsystem {
    /**
     *
     */
    detectionSystemId: string;
    /**
     *
     */
    id: string;
    /**
     *
     */
    ipAddress: JsonIpaddress;
}

/**
 *
 */
export class JsonEvent {
    /**
     *
     */
    detectionPoint: JsonDetectionpoint;
    /**
     *
     */
    detectionSystem: JsonDetectionsystem;
    /**
     *
     */
    id: string;
    /**
     *
     */
    metadata: Array<JsonKeyvaluepair>;
    /**
     *
     */
    resource: JsonResource;
    /**
     *
     */
    timestamp: string;
    /**
     *
     */
    user: JsonUser;
}

/**
 *
 */
export class JsonGeolocation {
    /**
     *
     */
    id: string;
    /**
     *
     */
    latitude: number;
    /**
     *
     */
    longitude: number;
}

/**
 *
 */
export class JsonIpaddress {
    /**
     *
     */
    address: string;
    /**
     *
     */
    geoLocation: JsonGeolocation;
    /**
     *
     */
    id: string;
}

/**
 *
 */
export class JsonInterval {
    /**
     *
     */
    duration: number;
    /**
     *
     */
    id: string;
    /**
     *
     */
    unit: string;
}

/**
 *
 */
export class JsonKeyvaluepair {
    /**
     *
     */
    id: string;
    /**
     *
     */
    key: string;
    /**
     *
     */
    value: string;
}

/**
 *
 */
export class JsonResource {
    /**
     *
     */
    id: string;
    /**
     *
     */
    location: string;
    /**
     *
     */
    method: string;
}

/**
 *
 */
export class JsonResponse {
    /**
     *
     */
    action: string;
    /**
     *
     */
    active: boolean;
    /**
     *
     */
    detectionSystem: JsonDetectionsystem;
    /**
     *
     */
    id: string;
    /**
     *
     */
    interval: JsonInterval;
    /**
     *
     */
    metadata: Array<JsonKeyvaluepair>;
    /**
     *
     */
    timestamp: string;
    /**
     *
     */
    user: JsonUser;
}

/**
 *
 */
export class JsonThreshold {
    /**
     *
     */
    count: number;
    /**
     *
     */
    id: string;
    /**
     *
     */
}

export class JsonUser {
    /**
     *
     */
    id: string;
    /**
     *
     */
    ipAddress: JsonIpaddress;
    /**
     *
     */
    username: string;
}


interface Authentication {
    /**
     * Apply authentication settings to header and query params.
     */
    applyToRequest(requestOptions: request.Options): void;
}

class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    }
}

class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export class RestReportingEngineApi {
    protected basePath = 'http://localhost:8085';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    };

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineFindAttacksGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: Array<JsonAttack>;  }> {
        const path = this.basePath + '/api/v1.0/reports/attacks';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<JsonAttack>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineCountAttacksGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/attacks/count';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param label
     */
    public resourceRestReportingEngineCountAttacksByLabelGET (earliest?: string, label?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/attacks/count-by-label';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (label !== undefined) {
            queryParameters['label'] = label;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param username
     */
    public resourceRestReportingEngineCountAttacksByUserGET (earliest?: string, username?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/attacks/count-by-user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (username !== undefined) {
            queryParameters['username'] = username;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineFindEventsGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: Array<JsonEvent>;  }> {
        const path = this.basePath + '/api/v1.0/reports/events';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<JsonEvent>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineCountEventsGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/events/count';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param label
     */
    public resourceRestReportingEngineCountEventsByLabelGET (earliest?: string, label?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/events/count-by-label';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (label !== undefined) {
            queryParameters['label'] = label;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param username
     */
    public resourceRestReportingEngineCountEventsByUserGET (earliest?: string, username?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/events/count-by-user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (username !== undefined) {
            queryParameters['username'] = username;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineFindResponsesGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: Array<JsonResponse>;  }> {
        const path = this.basePath + '/api/v1.0/reports/responses';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<JsonResponse>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestReportingEngineCountResponsesGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/responses/count';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param label
     */
    public resourceRestReportingEngineCountResponsesByLabelGET (earliest?: string, label?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/responses/count-by-label';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (label !== undefined) {
            queryParameters['label'] = label;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     * @param username
     */
    public resourceRestReportingEngineCountResponsesByUserGET (earliest?: string, username?: string) : Promise<{ response: http.ClientResponse; body: number;  }> {
        const path = this.basePath + '/api/v1.0/reports/responses/count-by-user';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        if (username !== undefined) {
            queryParameters['username'] = username;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: number;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     */
    public resourceRestReportingEngineGetServerConfigurationAsJsonGET () : Promise<{ response: http.ClientResponse; body: string;  }> {
        const path = this.basePath + '/api/v1.0/reports/server-config';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: string;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     */
    public resourceRestReportingEngineGetBase64EncodedServerConfigurationFileContentGET () : Promise<{ response: http.ClientResponse; body: JsonKeyvaluepair;  }> {
        const path = this.basePath + '/api/v1.0/reports/server-config-base64';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: JsonKeyvaluepair;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class RestRequestHandlerApi {
    protected basePath = 'http://localhost:8085';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    };

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     *
     *
     * @param body
     */
    public resourceRestRequestHandlerAddAttackPOST (body?: JsonAttack) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const path = this.basePath + '/api/v1.0/attacks';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body?: any;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: body,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param body
     */
    public resourceRestRequestHandlerAddEventPOST (body?: JsonEvent) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const path = this.basePath + '/api/v1.0/events';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body?: any;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: body,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
    /**
     *
     *
     * @param earliest
     */
    public resourceRestRequestHandlerGetResponsesGET (earliest?: string) : Promise<{ response: http.ClientResponse; body: Array<JsonResponse>;  }> {
        const path = this.basePath + '/api/v1.0/responses';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (earliest !== undefined) {
            queryParameters['earliest'] = earliest;
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Array<JsonResponse>;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
